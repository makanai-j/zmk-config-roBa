#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAC {
            bindings = <
&kp Q               &kp W         &kp E             &kp R         &kp T                                      &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D             &lt 4 F       &kp G        &mkp MCLK      &kp SEMICOLON  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z               &kp X         &kp C             &kp V         &lt 5 B      &kp COLON      &kp SLASH      &kp N        &kp M  &kp COMMA  &kp DOT  &kp EQUAL
&kp LSHIFT          &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 2 SPACE  &kp TAB        &kp BACKSPACE  &lt 3 ENTER                             &kp LS(LG(NUMBER_4))
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        WINDOWS {
            bindings = <
&kp Q      &kp W     &kp E         &kp R             &kp T                                 &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S     &kp D         &lt 4 F           &kp G        &mkp MCLK      &kp SEMI  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z      &kp X     &kp C         &kp V             &lt 5 B      &kp COLON      &kp FSLH  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LSHFT  &kp LALT  &kp LEFT_GUI  &kp LEFT_CONTROL  &lt 2 SPACE  &kp TAB        &kp BSPC  &lt 3 ENTER                             &kp LS(LG(S))
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        MOUSE {
            bindings = <
&kp ESCAPE  &trans              &trans            &trans         &trans                             &trans  &trans          &mkp MCLK       &trans           &kp F12
&trans      &trans              &kp LC(UP_ARROW)  &trans         &trans   &trans            &trans  &trans  &mkp MB1        &kp UP_ARROW    &mkp MB2         &trans
&kp HOME    &kp LC(LEFT_ARROW)  &kp LC(DOWN)      &kp LC(RIGHT)  &kp END  &kp CAPSLOCK      &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans      &trans              &trans            &trans         &trans   &trans            &trans  &trans                                                   &trans
            >;
        };

        NUM {
            bindings = <
&kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LEFT_PARENTHESIS                                       &kp RIGHT_PARENTHESIS  &kp UNDERSCORE   &kp TILDE     &kp LESS_THAN  &kp GREATER_THAN
&kp MINUS     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LEFT_BRACKET      &trans             &trans            &kp RIGHT_BRACKET      &kp AMPERSAND    &kp CARET     &kp BACKSLASH  &kp PERCENT
&kp SLASH     &kp N7        &kp N8        &kp N9        &kp LEFT_BRACE        &kp LESS_THAN      &kp GREATER_THAN  &kp RIGHT_BRACE        &kp EXCLAMATION  &kp QUESTION  &kp HASH       &trans
&kp ASTERISK  &kp PERCENT   &kp N0        &trans        &trans                &trans             &trans            &trans                                                               &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        BLUETOOTH {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &tog 0        &tog 1        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
